// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: aura/v1/tx.proto

package aurav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_Burn_FullMethodName                 = "/aura.v1.Msg/Burn"
	Msg_Mint_FullMethodName                 = "/aura.v1.Msg/Mint"
	Msg_Pause_FullMethodName                = "/aura.v1.Msg/Pause"
	Msg_Unpause_FullMethodName              = "/aura.v1.Msg/Unpause"
	Msg_TransferOwnership_FullMethodName    = "/aura.v1.Msg/TransferOwnership"
	Msg_AcceptOwnership_FullMethodName      = "/aura.v1.Msg/AcceptOwnership"
	Msg_AddBurner_FullMethodName            = "/aura.v1.Msg/AddBurner"
	Msg_RemoveBurner_FullMethodName         = "/aura.v1.Msg/RemoveBurner"
	Msg_SetBurnerAllowance_FullMethodName   = "/aura.v1.Msg/SetBurnerAllowance"
	Msg_AddMinter_FullMethodName            = "/aura.v1.Msg/AddMinter"
	Msg_RemoveMinter_FullMethodName         = "/aura.v1.Msg/RemoveMinter"
	Msg_SetMinterAllowance_FullMethodName   = "/aura.v1.Msg/SetMinterAllowance"
	Msg_AddPauser_FullMethodName            = "/aura.v1.Msg/AddPauser"
	Msg_RemovePauser_FullMethodName         = "/aura.v1.Msg/RemovePauser"
	Msg_AddBlockedChannel_FullMethodName    = "/aura.v1.Msg/AddBlockedChannel"
	Msg_RemoveBlockedChannel_FullMethodName = "/aura.v1.Msg/RemoveBlockedChannel"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error)
	Mint(ctx context.Context, in *MsgMint, opts ...grpc.CallOption) (*MsgMintResponse, error)
	Pause(ctx context.Context, in *MsgPause, opts ...grpc.CallOption) (*MsgPauseResponse, error)
	Unpause(ctx context.Context, in *MsgUnpause, opts ...grpc.CallOption) (*MsgUnpauseResponse, error)
	TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error)
	AcceptOwnership(ctx context.Context, in *MsgAcceptOwnership, opts ...grpc.CallOption) (*MsgAcceptOwnershipResponse, error)
	AddBurner(ctx context.Context, in *MsgAddBurner, opts ...grpc.CallOption) (*MsgAddBurnerResponse, error)
	RemoveBurner(ctx context.Context, in *MsgRemoveBurner, opts ...grpc.CallOption) (*MsgRemoveBurnerResponse, error)
	SetBurnerAllowance(ctx context.Context, in *MsgSetBurnerAllowance, opts ...grpc.CallOption) (*MsgSetBurnerAllowanceResponse, error)
	AddMinter(ctx context.Context, in *MsgAddMinter, opts ...grpc.CallOption) (*MsgAddMinterResponse, error)
	RemoveMinter(ctx context.Context, in *MsgRemoveMinter, opts ...grpc.CallOption) (*MsgRemoveMinterResponse, error)
	SetMinterAllowance(ctx context.Context, in *MsgSetMinterAllowance, opts ...grpc.CallOption) (*MsgSetMinterAllowanceResponse, error)
	AddPauser(ctx context.Context, in *MsgAddPauser, opts ...grpc.CallOption) (*MsgAddPauserResponse, error)
	RemovePauser(ctx context.Context, in *MsgRemovePauser, opts ...grpc.CallOption) (*MsgRemovePauserResponse, error)
	AddBlockedChannel(ctx context.Context, in *MsgAddBlockedChannel, opts ...grpc.CallOption) (*MsgAddBlockedChannelResponse, error)
	RemoveBlockedChannel(ctx context.Context, in *MsgRemoveBlockedChannel, opts ...grpc.CallOption) (*MsgRemoveBlockedChannelResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgBurnResponse)
	err := c.cc.Invoke(ctx, Msg_Burn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Mint(ctx context.Context, in *MsgMint, opts ...grpc.CallOption) (*MsgMintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgMintResponse)
	err := c.cc.Invoke(ctx, Msg_Mint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Pause(ctx context.Context, in *MsgPause, opts ...grpc.CallOption) (*MsgPauseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgPauseResponse)
	err := c.cc.Invoke(ctx, Msg_Pause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Unpause(ctx context.Context, in *MsgUnpause, opts ...grpc.CallOption) (*MsgUnpauseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUnpauseResponse)
	err := c.cc.Invoke(ctx, Msg_Unpause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgTransferOwnershipResponse)
	err := c.cc.Invoke(ctx, Msg_TransferOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcceptOwnership(ctx context.Context, in *MsgAcceptOwnership, opts ...grpc.CallOption) (*MsgAcceptOwnershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAcceptOwnershipResponse)
	err := c.cc.Invoke(ctx, Msg_AcceptOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddBurner(ctx context.Context, in *MsgAddBurner, opts ...grpc.CallOption) (*MsgAddBurnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAddBurnerResponse)
	err := c.cc.Invoke(ctx, Msg_AddBurner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveBurner(ctx context.Context, in *MsgRemoveBurner, opts ...grpc.CallOption) (*MsgRemoveBurnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRemoveBurnerResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveBurner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetBurnerAllowance(ctx context.Context, in *MsgSetBurnerAllowance, opts ...grpc.CallOption) (*MsgSetBurnerAllowanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgSetBurnerAllowanceResponse)
	err := c.cc.Invoke(ctx, Msg_SetBurnerAllowance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddMinter(ctx context.Context, in *MsgAddMinter, opts ...grpc.CallOption) (*MsgAddMinterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAddMinterResponse)
	err := c.cc.Invoke(ctx, Msg_AddMinter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveMinter(ctx context.Context, in *MsgRemoveMinter, opts ...grpc.CallOption) (*MsgRemoveMinterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRemoveMinterResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveMinter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMinterAllowance(ctx context.Context, in *MsgSetMinterAllowance, opts ...grpc.CallOption) (*MsgSetMinterAllowanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgSetMinterAllowanceResponse)
	err := c.cc.Invoke(ctx, Msg_SetMinterAllowance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddPauser(ctx context.Context, in *MsgAddPauser, opts ...grpc.CallOption) (*MsgAddPauserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAddPauserResponse)
	err := c.cc.Invoke(ctx, Msg_AddPauser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemovePauser(ctx context.Context, in *MsgRemovePauser, opts ...grpc.CallOption) (*MsgRemovePauserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRemovePauserResponse)
	err := c.cc.Invoke(ctx, Msg_RemovePauser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddBlockedChannel(ctx context.Context, in *MsgAddBlockedChannel, opts ...grpc.CallOption) (*MsgAddBlockedChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAddBlockedChannelResponse)
	err := c.cc.Invoke(ctx, Msg_AddBlockedChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveBlockedChannel(ctx context.Context, in *MsgRemoveBlockedChannel, opts ...grpc.CallOption) (*MsgRemoveBlockedChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRemoveBlockedChannelResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveBlockedChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
type MsgServer interface {
	Burn(context.Context, *MsgBurn) (*MsgBurnResponse, error)
	Mint(context.Context, *MsgMint) (*MsgMintResponse, error)
	Pause(context.Context, *MsgPause) (*MsgPauseResponse, error)
	Unpause(context.Context, *MsgUnpause) (*MsgUnpauseResponse, error)
	TransferOwnership(context.Context, *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error)
	AcceptOwnership(context.Context, *MsgAcceptOwnership) (*MsgAcceptOwnershipResponse, error)
	AddBurner(context.Context, *MsgAddBurner) (*MsgAddBurnerResponse, error)
	RemoveBurner(context.Context, *MsgRemoveBurner) (*MsgRemoveBurnerResponse, error)
	SetBurnerAllowance(context.Context, *MsgSetBurnerAllowance) (*MsgSetBurnerAllowanceResponse, error)
	AddMinter(context.Context, *MsgAddMinter) (*MsgAddMinterResponse, error)
	RemoveMinter(context.Context, *MsgRemoveMinter) (*MsgRemoveMinterResponse, error)
	SetMinterAllowance(context.Context, *MsgSetMinterAllowance) (*MsgSetMinterAllowanceResponse, error)
	AddPauser(context.Context, *MsgAddPauser) (*MsgAddPauserResponse, error)
	RemovePauser(context.Context, *MsgRemovePauser) (*MsgRemovePauserResponse, error)
	AddBlockedChannel(context.Context, *MsgAddBlockedChannel) (*MsgAddBlockedChannelResponse, error)
	RemoveBlockedChannel(context.Context, *MsgRemoveBlockedChannel) (*MsgRemoveBlockedChannelResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) Burn(context.Context, *MsgBurn) (*MsgBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Burn not implemented")
}
func (UnimplementedMsgServer) Mint(context.Context, *MsgMint) (*MsgMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (UnimplementedMsgServer) Pause(context.Context, *MsgPause) (*MsgPauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedMsgServer) Unpause(context.Context, *MsgUnpause) (*MsgUnpauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedMsgServer) TransferOwnership(context.Context, *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedMsgServer) AcceptOwnership(context.Context, *MsgAcceptOwnership) (*MsgAcceptOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOwnership not implemented")
}
func (UnimplementedMsgServer) AddBurner(context.Context, *MsgAddBurner) (*MsgAddBurnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBurner not implemented")
}
func (UnimplementedMsgServer) RemoveBurner(context.Context, *MsgRemoveBurner) (*MsgRemoveBurnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBurner not implemented")
}
func (UnimplementedMsgServer) SetBurnerAllowance(context.Context, *MsgSetBurnerAllowance) (*MsgSetBurnerAllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBurnerAllowance not implemented")
}
func (UnimplementedMsgServer) AddMinter(context.Context, *MsgAddMinter) (*MsgAddMinterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinter not implemented")
}
func (UnimplementedMsgServer) RemoveMinter(context.Context, *MsgRemoveMinter) (*MsgRemoveMinterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMinter not implemented")
}
func (UnimplementedMsgServer) SetMinterAllowance(context.Context, *MsgSetMinterAllowance) (*MsgSetMinterAllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMinterAllowance not implemented")
}
func (UnimplementedMsgServer) AddPauser(context.Context, *MsgAddPauser) (*MsgAddPauserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPauser not implemented")
}
func (UnimplementedMsgServer) RemovePauser(context.Context, *MsgRemovePauser) (*MsgRemovePauserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePauser not implemented")
}
func (UnimplementedMsgServer) AddBlockedChannel(context.Context, *MsgAddBlockedChannel) (*MsgAddBlockedChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlockedChannel not implemented")
}
func (UnimplementedMsgServer) RemoveBlockedChannel(context.Context, *MsgRemoveBlockedChannel) (*MsgRemoveBlockedChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlockedChannel not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_Burn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Burn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Burn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Burn(ctx, req.(*MsgBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Mint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Mint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Mint(ctx, req.(*MsgMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPause)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Pause(ctx, req.(*MsgPause))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpause)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Unpause(ctx, req.(*MsgUnpause))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TransferOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferOwnership(ctx, req.(*MsgTransferOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcceptOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AcceptOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptOwnership(ctx, req.(*MsgAcceptOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddBurner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddBurner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddBurner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddBurner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddBurner(ctx, req.(*MsgAddBurner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveBurner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveBurner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveBurner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveBurner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveBurner(ctx, req.(*MsgRemoveBurner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetBurnerAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetBurnerAllowance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetBurnerAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetBurnerAllowance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetBurnerAllowance(ctx, req.(*MsgSetBurnerAllowance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddMinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMinter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddMinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddMinter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddMinter(ctx, req.(*MsgAddMinter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveMinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveMinter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveMinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveMinter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveMinter(ctx, req.(*MsgRemoveMinter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMinterAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMinterAllowance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMinterAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetMinterAllowance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMinterAllowance(ctx, req.(*MsgSetMinterAllowance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddPauser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddPauser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddPauser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddPauser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddPauser(ctx, req.(*MsgAddPauser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemovePauser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemovePauser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemovePauser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemovePauser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemovePauser(ctx, req.(*MsgRemovePauser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddBlockedChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddBlockedChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddBlockedChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddBlockedChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddBlockedChannel(ctx, req.(*MsgAddBlockedChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveBlockedChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveBlockedChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveBlockedChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveBlockedChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveBlockedChannel(ctx, req.(*MsgRemoveBlockedChannel))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aura.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Burn",
			Handler:    _Msg_Burn_Handler,
		},
		{
			MethodName: "Mint",
			Handler:    _Msg_Mint_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Msg_Pause_Handler,
		},
		{
			MethodName: "Unpause",
			Handler:    _Msg_Unpause_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _Msg_TransferOwnership_Handler,
		},
		{
			MethodName: "AcceptOwnership",
			Handler:    _Msg_AcceptOwnership_Handler,
		},
		{
			MethodName: "AddBurner",
			Handler:    _Msg_AddBurner_Handler,
		},
		{
			MethodName: "RemoveBurner",
			Handler:    _Msg_RemoveBurner_Handler,
		},
		{
			MethodName: "SetBurnerAllowance",
			Handler:    _Msg_SetBurnerAllowance_Handler,
		},
		{
			MethodName: "AddMinter",
			Handler:    _Msg_AddMinter_Handler,
		},
		{
			MethodName: "RemoveMinter",
			Handler:    _Msg_RemoveMinter_Handler,
		},
		{
			MethodName: "SetMinterAllowance",
			Handler:    _Msg_SetMinterAllowance_Handler,
		},
		{
			MethodName: "AddPauser",
			Handler:    _Msg_AddPauser_Handler,
		},
		{
			MethodName: "RemovePauser",
			Handler:    _Msg_RemovePauser_Handler,
		},
		{
			MethodName: "AddBlockedChannel",
			Handler:    _Msg_AddBlockedChannel_Handler,
		},
		{
			MethodName: "RemoveBlockedChannel",
			Handler:    _Msg_RemoveBlockedChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aura/v1/tx.proto",
}
